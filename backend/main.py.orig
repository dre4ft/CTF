from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import json
import uuid
import os
from typing import Optional, List

app = FastAPI()

# ðŸ”¹ CORS : Autoriser toutes les origines (Ã€ restreindre en production)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class UserLogin(BaseModel):
    username: str
    password: str

# ðŸ”¹ ModÃ¨les de donnÃ©es
class User(BaseModel):
    id: int  # Correspond Ã  l'ID utilisÃ© dans FakeData
    username: str
    password: str
    email: str
    full_name: str
    avatar: str

class UserCreate(BaseModel):
    username: str
    password: str
    email: str
    full_name: str

class Tweet(BaseModel):
    id: int
    userId: int
    content: str
    likes: int
    retweets: int

# ðŸ”¹ Fichiers de base de donnÃ©es
DB_USERS = "users.json"
DB_TWEETS = "tweets.json"

# ðŸ”¹ VÃ©rification et crÃ©ation des fichiers JSON si nÃ©cessaires
if not os.path.exists(DB_USERS):
    with open(DB_USERS, "w") as f:
        json.dump({"users": []}, f, indent=4)

if not os.path.exists(DB_TWEETS):
    with open(DB_TWEETS, "w") as f:
        json.dump({"tweets": []}, f, indent=4)

# ðŸ”¹ Fonctions de gestion des utilisateurs
def get_users() -> List[User]:
    with open(DB_USERS, "r") as f:
        return [User(**user) for user in json.load(f)["users"]]

def save_user(user: User):
    users = get_users()
    users.append(user)
    with open(DB_USERS, "w") as f:
        json.dump({"users": [u.dict() for u in users]}, f, indent=4)

def get_user_by_username(username: str) -> Optional[User]:
    for user in get_users():
        if user.username == username:
            return user
    return None

# ðŸ”¹ Fonctions de gestion des tweets
def get_tweets() -> List[Tweet]:
    with open(DB_TWEETS, "r") as f:
        return [Tweet(**tweet) for tweet in json.load(f)["tweets"]]

def save_tweet(tweet: Tweet):
    tweets = get_tweets()
    tweets.append(tweet)
    with open(DB_TWEETS, "w") as f:
        json.dump({"tweets": [t.dict() for t in tweets]}, f, indent=4)

# ðŸ”¹ Routes API

@app.post("/api/register")
async def register(user: UserCreate):
    if get_user_by_username(user.username):
        raise HTTPException(status_code=400, detail="Username already taken")
    
    new_user = User(
        id=len(get_users()) + 1,
        username=user.username,
        password=user.password,
        email=user.email,
        full_name=user.full_name,
        avatar=f"https://i.pravatar.cc/150?img={len(get_users()) + 1}"
    )
    
    save_user(new_user)
    return {"message": "User created", "user_id": new_user.id}

## ðŸ“Œ Connexion
@app.post("/api/login")
async def login(user: UserLogin):
    db_user = get_user_by_username(user.username)
    if not db_user or db_user.password != user.password:
        raise HTTPException(status_code=401, detail="Invalid credentials")
    
    return {"token": str(uuid.uuid4()), "user_id": db_user.id}

## ðŸ“Œ Obtenir la liste des utilisateurs
@app.get("/api/users/{user_id}", response_model=User)
async def get_user(user_id: int):
    user = next((user for user in get_users() if user.id == user_id), None)
    if not user:
        raise HTTPException(status_code=404, detail="Utilisateur non trouvÃ©")
    return user

## ðŸ“Œ Obtenir la liste des tweets
@app.get("/api/tweets", response_model=List[Tweet])
async def get_all_tweets():
    return get_tweets()



@app.get("/")
async def serve_index():
    with open("../frontend/index.html", "r") as f:
        return HTMLResponse(content=f.read())

    
# Route pour servir la page de profil
@app.get("/profile", response_class=HTMLResponse)
async def profile_page():
    with open("../frontend/profile.html", "r") as f:
        return HTMLResponse(content=f.read())

# ðŸ”¹ Servir les fichiers du frontend
app.mount("/static", StaticFiles(directory="/var/www/html/frontend/static", html=True), name="frontend")

# ðŸ”¹ Lancement du serveur
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=80)
